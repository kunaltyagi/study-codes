node[] nodeList
head=0
tail=0
length=20

init()
{
    nodeList = new Node(length);
}

insert@tail(node n)
{
    if(tail<length-1)
    {
        nodeList[tail+1]=n;
        tail+=1;
    }
    else
    {
        node[] tmpList;
        tmpList = new Node(length*2);
        for(int i=0;i<length;++i)
        {
            tmpList[i]=nodeList[i];
        }
        tmpList[length] = n;
        tail=length+1;
        length*=2;
        nodeList = tmpList;
    }
}
delete@tail()
{
    if(tail>=0)
    {
        nodeList+tail=null;
        tail-=1;
    }
    if(tail==length/4)
    {
        node[] tmpList;
        tmpList = new Node(length/2);
        for(int i=0;i<length/4;++i)
        {
            tmpList[i]=nodeList[i];
        }
        tmpList[length] = n;
        length/=2;
        nodeList = tmpList;
    }
}
getNode(int i)
{
    return nodeList[i];
}
insert@head(node n)
{
    node[] tmpList;
    tmpList = new Node(length+1);
    for(int i=0;i<length;++i)
    {
        tmpList[i+1]=nodeList[i];
    }
    tmpList[0] = n;
    tail+=1;
    length+=1;
    nodeList = tmpList;
}
delete@head()
{
    node[] tmpList;
    tmpList = new Node(length-1);
    for(int i=0;i<length-1;++i)
    {
        tmpList[i]=nodeList[i+1];
    }
    tail-=1;
    length-=1;
    nodeList = tmpList;
}