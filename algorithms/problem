
A>
The i-th prefix average of an array X is average of the first (i + 1) elements of X: A[i] = (X[0] + X[1] + ... + X[i])/(i+1). Present two algorithms for computing the array A of
prefix averages of another array X (problem discussed on page 33 of notes of 17th Jan). Analyse the running time of each algorithm.

B>
1. Consider an array containing n integers a_0, a_1, a_2, .... , a_(n-1).


Describe efficient algorithms for the following problems. Analyze the running time of your algorithms. For these problems, subsequence means a consecutive subsequence of numbers from some a_i to a_j.

         a) Find the longest strictly increasing subsequence.

@TODO    b) Find the shortest subsequence with sum >= a specified number M. Shortest means containing fewest possible numbers. Find the longest subsequence with sum <= a specified number M.

@TODO    c) Find a subsequence with minimum positive sum.

         d) Break the sequence into 2 disjoint subsequences such that maximum sum of the subsequences is minimized. Do the same for 3 disjoint subsequences.


2. Show that x^n can be computed using O(log n) multiplications. Using the same idea, show that the nth Fibonacci number can be computed using O(log n) arithmetic operations. The Fibonacci numbers are defined by f_0 = f_1 = 1 and f_n = f_(n-1) + f_{n-2) for n >= 2.

3. How many arithmetic operations are required to evaluate a polynomial of degree n in one variable with integer coefficients? How many operations are required to multiply two such polynomials?

C>
Find a O(N) algorithm to find the maximum sum subsequence.

D>
